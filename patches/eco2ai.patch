diff --git a/eco2ai/emission_track.py b/eco2ai/emission_track.py
index 247b79c..a575d76 100644
--- a/eco2ai/emission_track.py
+++ b/eco2ai/emission_track.py
@@ -7,7 +7,8 @@ import uuid
 import warnings
 import tzlocal
 import requests
-from apscheduler.schedulers.background import BackgroundScheduler
+from apscheduler.schedulers.sync import Scheduler
+from apscheduler.triggers.interval import IntervalTrigger
 
 from eco2ai.tools.tools_gpu import GPU, all_available_gpu
 from eco2ai.tools.tools_cpu import CPU, all_available_cpu
@@ -165,11 +166,7 @@ You can find the ISO-Alpha-2 code of your country here: https://www.iban.com/cou
 
         self._emission_level, self._country = define_carbon_index(emission_level, alpha_2_code, region)
         self._cpu_processes = cpu_processes
-        self._scheduler = BackgroundScheduler(
-            job_defaults={'max_instances': 10}, 
-            timezone=str(tzlocal.get_localzone()),
-            misfire_grace_time=None
-            )
+        self._scheduler = Scheduler()
         self._start_time = None
         self._cpu = None
         self._gpu = None
@@ -566,8 +563,9 @@ You can find the ISO-Alpha-2 code of your country here: https://www.iban.com/cou
         # self._consumption = 0
         # self._start_time = time.time()
         if self._mode == "shut down":
-            self._scheduler.remove_job("job")
-            self._scheduler.shutdown()
+            # self._scheduler.remove_job("job")
+            self._scheduler.stop()
+            self._scheduler.remove_schedule("job")
         # self._write_to_csv returns attributes_dict
         res = self._write_to_csv(add_new)
         if self.webhook_url:
@@ -668,8 +666,9 @@ Please, use the interface for training: ".start_trainig", ".new_epoch", and "sto
             )
         if self._start_time is not None:
             try:
-                self._scheduler.remove_job("job")
-                self._scheduler.shutdown()
+                # self._scheduler.remove_job("job")
+                self._scheduler.stop()
+                self._scheduler.remove_schedule("job")
             except:
                 pass
             self._scheduler = BackgroundScheduler(job_defaults={'max_instances': 10}, misfire_grace_time=None)
@@ -679,8 +678,10 @@ Please, use the interface for training: ".start_trainig", ".new_epoch", and "sto
         self._id = str(uuid.uuid4())
         self._mode = "first_time"
         self._start_time = time.time()
-        self._scheduler.add_job(self._func_for_sched, "interval", seconds=self._measure_period, id="job")
-        self._scheduler.start()
+        # self._scheduler.add_job(self._func_for_sched, "interval", seconds=self._measure_period, id="job", replace_existing=True)
+        self._scheduler.add_schedule(self._func_for_sched, IntervalTrigger(seconds=10), id="job")
+        self._scheduler.start_in_background()
+        # self._scheduler.start()
 
 
     def stop_training(self,):
@@ -727,8 +728,9 @@ You should run ".start_training" method before ".stop_training" method
             return
         if self._start_time is None:
             raise Exception("Need to first start the tracker by running tracker.start() or tracker.start_training()")
-        self._scheduler.remove_job("job")
-        self._scheduler.shutdown()
+        # self._scheduler.remove_job("job")
+        self._scheduler.stop()
+        self._scheduler.remove_schedule("job")
         self._func_for_sched() 
         attributes_dict = self._write_to_csv()
         if self._encode_file is not None:
diff --git a/pyproject.toml b/pyproject.toml
index 31eb469..e470334 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -27,7 +27,7 @@ packages = [
 ]
 
 [tool.poetry.dependencies]
-python = "*"
+python = ">=3.7"
 pandas = [
     {version = ">=1.2.1,<=1.3.5", python = ">=3.7.1, <3.8" },
     {version = ">=1.4.0,<=1.4.3", python = ">=3.8"}
@@ -35,9 +35,7 @@ pandas = [
 
 #{version = ">=1.0.0,<=1.1.5", python = ">=3.6.1"},
 
-APScheduler = [
-    {version = "*",python = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4"}
-    ]
+APScheduler = "4.0.0a2"
 requests = [
     {version = "*",python = ">=3.7, <4"}
     ]
